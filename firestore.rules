rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() 
        && request.resource.data.keys().hasAll(['email', 'createdAt'])
        && request.resource.data.email == request.auth.token.email;
      allow update: if isOwner(userId) 
        && request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['displayName', 'photoURL', 'preferences']);
    }

    // Transcript analyses
    match /analyses/{analysisId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow create: if isEmailVerified()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['createdAt', 'courses', 'gpa']);
      allow update, delete: if isEmailVerified() 
        && resource.data.userId == request.auth.uid;
    }

    // User skills
    match /skills/{skillId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      allow create: if isEmailVerified()
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isEmailVerified() 
        && resource.data.userId == request.auth.uid;
    }
  }
}